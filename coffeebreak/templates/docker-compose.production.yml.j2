version: '3.8'

# CoffeeBreak Production Docker Compose Configuration
# Generated by CoffeeBreak CLI for domain: {{ domain }}
# Generated on: {{ timestamp }}

networks:
  coffeebreak-prod:
    name: coffeebreak-production
    driver: bridge
  database:
    name: coffeebreak-database
    driver: bridge
    internal: true

volumes:
  postgres_data:
    name: coffeebreak-postgres-data
  mongodb_data:
    name: coffeebreak-mongodb-data
  rabbitmq_data:
    name: coffeebreak-rabbitmq-data
  keycloak_data:
    name: coffeebreak-keycloak-data
  nginx_ssl:
    name: coffeebreak-nginx-ssl
  app_data:
    name: coffeebreak-app-data

secrets:
  postgres_password:
    external: true
    name: coffeebreak_postgres_password
  mongodb_password:
    external: true
    name: coffeebreak_mongodb_password
  rabbitmq_password:
    external: true
    name: coffeebreak_rabbitmq_password
  keycloak_admin_password:
    external: true
    name: coffeebreak_keycloak_admin_password
  api_secret_key:
    external: true
    name: coffeebreak_api_secret_key

services:
  # Database Services
  postgres:
    image: postgres:{{ postgres_version | default('15-alpine') }}
    container_name: coffeebreak-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: {{ postgres_db | default('coffeebreak') }}
      POSTGRES_USER: {{ postgres_user | default('coffeebreak') }}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{ postgres_user | default('coffeebreak') }} -d {{ postgres_db | default('coffeebreak') }}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: {{ postgres_memory | default('512M') }}
          cpus: '{{ postgres_cpus | default('0.5') }}'
        reservations:
          memory: 256M
          cpus: '0.25'

  mongodb:
    image: mongo:{{ mongodb_version | default('7') }}
    container_name: coffeebreak-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: {{ mongodb_user | default('coffeebreak') }}
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongodb_password
      MONGO_INITDB_DATABASE: {{ mongodb_db | default('coffeebreak') }}
    secrets:
      - mongodb_password
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d:ro
    networks:
      - database
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: {{ mongodb_memory | default('512M') }}
          cpus: '{{ mongodb_cpus | default('0.5') }}'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Message Queue
  rabbitmq:
    image: rabbitmq:{{ rabbitmq_version | default('3-management-alpine') }}
    container_name: coffeebreak-rabbitmq-prod
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: {{ rabbitmq_user | default('coffeebreak') }}
      RABBITMQ_DEFAULT_PASS_FILE: /run/secrets/rabbitmq_password
      RABBITMQ_DEFAULT_VHOST: {{ rabbitmq_vhost | default('/coffeebreak') }}
    secrets:
      - rabbitmq_password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - coffeebreak-prod
      - database
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: {{ rabbitmq_memory | default('256M') }}
          cpus: '{{ rabbitmq_cpus | default('0.25') }}'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Authentication Service
  keycloak:
    image: quay.io/keycloak/keycloak:{{ keycloak_version | default('23.0') }}
    container_name: coffeebreak-keycloak-prod
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/{{ postgres_db | default('coffeebreak') }}
      KC_DB_USERNAME: {{ postgres_user | default('coffeebreak') }}
      KC_DB_PASSWORD_FILE: /run/secrets/postgres_password
      KC_HOSTNAME: {{ domain }}
      KC_HOSTNAME_PORT: 443
      KC_HOSTNAME_STRICT: true
      KC_HOSTNAME_STRICT_HTTPS: true
      KC_HTTP_ENABLED: true
      KC_PROXY: edge
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD_FILE: /run/secrets/keycloak_admin_password
    secrets:
      - postgres_password
      - keycloak_admin_password
    volumes:
      - keycloak_data:/opt/keycloak/data
    networks:
      - coffeebreak-prod
      - database
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: {{ keycloak_memory | default('1G') }}
          cpus: '{{ keycloak_cpus | default('0.5') }}'
        reservations:
          memory: 512M
          cpus: '0.25'
    command: ["start", "--optimized"]

  # CoffeeBreak Core API
  coffeebreak-api:
    image: {{ api_image | default('coffeebreak/api:latest') }}
    container_name: coffeebreak-api-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      API_PORT: 3000
      DATABASE_URL: postgresql://{{ postgres_user | default('coffeebreak') }}:$(cat /run/secrets/postgres_password)@postgres:5432/{{ postgres_db | default('coffeebreak') }}
      MONGODB_URL: mongodb://{{ mongodb_user | default('coffeebreak') }}:$(cat /run/secrets/mongodb_password)@mongodb:27017/{{ mongodb_db | default('coffeebreak') }}
      RABBITMQ_URL: amqp://{{ rabbitmq_user | default('coffeebreak') }}:$(cat /run/secrets/rabbitmq_password)@rabbitmq:5672{{ rabbitmq_vhost | default('/coffeebreak') }}
      KEYCLOAK_URL: http://keycloak:8080
      SECRET_KEY_FILE: /run/secrets/api_secret_key
      LOG_LEVEL: {{ api_log_level | default('info') }}
      CORS_ORIGINS: https://{{ domain }}
    secrets:
      - postgres_password
      - mongodb_password
      - rabbitmq_password
      - api_secret_key
    volumes:
      - app_data:/app/data
      - ./logs:/app/logs
    networks:
      - coffeebreak-prod
      - database
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: {{ api_memory | default('1G') }}
          cpus: '{{ api_cpus | default('1.0') }}'
        reservations:
          memory: 512M
          cpus: '0.5'

  # CoffeeBreak Frontend
  coffeebreak-frontend:
    image: {{ frontend_image | default('coffeebreak/frontend:latest') }}
    container_name: coffeebreak-frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: https://{{ domain }}/api
      REACT_APP_KEYCLOAK_URL: https://{{ domain }}/auth
      GENERATE_SOURCEMAP: false
    volumes:
      - ./nginx/frontend.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - coffeebreak-prod
    depends_on:
      - coffeebreak-api
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: {{ frontend_memory | default('256M') }}
          cpus: '{{ frontend_cpus | default('0.25') }}'
        reservations:
          memory: 128M
          cpus: '0.1'

  # CoffeeBreak Event App
  coffeebreak-events:
    image: {{ events_image | default('coffeebreak/events:latest') }}
    container_name: coffeebreak-events-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: https://{{ domain }}/api
      REACT_APP_KEYCLOAK_URL: https://{{ domain }}/auth
      GENERATE_SOURCEMAP: false
    volumes:
      - ./nginx/events.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - coffeebreak-prod
    depends_on:
      - coffeebreak-api
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: {{ events_memory | default('256M') }}
          cpus: '{{ events_cpus | default('0.25') }}'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:{{ nginx_version | default('1.25-alpine') }}
    container_name: coffeebreak-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_ssl:/etc/nginx/ssl:ro
      - ./nginx/html:/var/www/html:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - coffeebreak-prod
    depends_on:
      - coffeebreak-api
      - coffeebreak-frontend
      - coffeebreak-events
      - keycloak
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: {{ nginx_memory | default('128M') }}
          cpus: '{{ nginx_cpus | default('0.25') }}'
        reservations:
          memory: 64M
          cpus: '0.1'

{% if enable_monitoring | default(true) %}
  # Monitoring Services
  prometheus:
    image: prom/prometheus:{{ prometheus_version | default('latest') }}
    container_name: coffeebreak-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time={{ prometheus_retention | default('30d') }}'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
    networks:
      - coffeebreak-prod
    deploy:
      resources:
        limits:
          memory: {{ prometheus_memory | default('512M') }}
          cpus: '{{ prometheus_cpus | default('0.5') }}'
        reservations:
          memory: 256M
          cpus: '0.25'

  grafana:
    image: grafana/grafana:{{ grafana_version | default('latest') }}
    container_name: coffeebreak-grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER={{ grafana_admin_user | default('admin') }}
      - GF_SECURITY_ADMIN_PASSWORD={{ grafana_admin_password | default('admin') }}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - coffeebreak-prod
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: {{ grafana_memory | default('256M') }}
          cpus: '{{ grafana_cpus | default('0.25') }}'
        reservations:
          memory: 128M
          cpus: '0.1'
{% endif %}

{% if enable_backup | default(true) %}
  # Backup Service
  backup:
    image: postgres:{{ postgres_version | default('15-alpine') }}
    container_name: coffeebreak-backup-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: {{ postgres_user | default('coffeebreak') }}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_HOST: postgres
      POSTGRES_DB: {{ postgres_db | default('coffeebreak') }}
      BACKUP_SCHEDULE: "{{ backup_schedule | default('0 2 * * *') }}"
      BACKUP_RETENTION_DAYS: {{ backup_retention | default('30') }}
    secrets:
      - postgres_password
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
    networks:
      - database
    depends_on:
      postgres:
        condition: service_healthy
    command: ["sh", "-c", "while true; do sleep 86400; done"]
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
{% endif %}