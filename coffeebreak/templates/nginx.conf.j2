# CoffeeBreak Production Nginx Configuration
# Generated by CoffeeBreak CLI for domain: {{ domain }}
# Generated on: {{ timestamp }}

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log {{ nginx_log_level | default('warn') }};
pid /var/run/nginx.pid;

# Load dynamic modules
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections {{ nginx_worker_connections | default('1024') }};
    use epoll;
    multi_accept on;
}

http {
    # Basic Settings
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout {{ nginx_keepalive_timeout | default('65') }};
    types_hash_max_size 2048;
    server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'self';" always;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate={{ api_rate_limit | default('10r/s') }};
    limit_req_zone $binary_remote_addr zone=login:10m rate={{ login_rate_limit | default('5r/m') }};

    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # OCSP Stapling
    resolver {{ dns_resolver | default('8.8.8.8 8.8.4.4') }} valid=300s;
    resolver_timeout 5s;

    # Upstream definitions
    upstream coffeebreak_api {
        server coffeebreak-api:3000;
        keepalive 16;
    }

    upstream coffeebreak_frontend {
        server coffeebreak-frontend:80;
        keepalive 16;
    }

    upstream coffeebreak_events {
        server coffeebreak-events:80;
        keepalive 16;
    }

    upstream keycloak_upstream {
        server keycloak:8080;
        keepalive 16;
    }

{% if enable_monitoring | default(true) %}
    upstream prometheus_upstream {
        server prometheus:9090;
        keepalive 8;
    }

    upstream grafana_upstream {
        server grafana:3000;
        keepalive 8;
    }
{% endif %}

    # HTTP to HTTPS redirect
    server {
        listen 80;
        listen [::]:80;
        server_name {{ domain }} *.{{ domain }};

        # Let's Encrypt challenge
        location /.well-known/acme-challenge/ {
            root /var/www/html;
            try_files $uri =404;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name {{ domain }};

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/{{ domain }}/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/{{ domain }}/privkey.pem;
        ssl_trusted_certificate /etc/nginx/ssl/{{ domain }}/chain.pem;

        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # Frontend Application
        location / {
            proxy_pass http://coffeebreak_frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # Frontend specific settings
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;
            proxy_buffering off;

            # Handle static files
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                proxy_pass http://coffeebreak_frontend;
                proxy_cache_valid 200 1y;
                add_header Cache-Control "public, immutable";
                expires 1y;
            }
        }

        # API Endpoints
        location /api/ {
            limit_req zone=api burst={{ api_burst | default('20') }} nodelay;

            proxy_pass http://coffeebreak_api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # API specific settings
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;
            proxy_buffering off;
            proxy_request_buffering off;

            # Timeouts
            proxy_connect_timeout {{ api_connect_timeout | default('60s') }};
            proxy_send_timeout {{ api_send_timeout | default('60s') }};
            proxy_read_timeout {{ api_read_timeout | default('60s') }};

            # WebSocket support
            proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
            proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
            proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;
        }

        # Authentication Service
        location /auth/ {
            limit_req zone=login burst={{ login_burst | default('10') }} nodelay;

            proxy_pass http://keycloak_upstream/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # Keycloak specific settings
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;
            proxy_buffering off;

            # Longer timeouts for auth
            proxy_connect_timeout 120s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Security.txt
        location /.well-known/security.txt {
            return 200 "Contact: security@{{ domain | replace('.', '-') }}.com\nExpires: {{ (ansible_date_time.epoch | int + 31536000) | strftime('%Y-%m-%dT%H:%M:%S.000Z') }}\n";
            add_header Content-Type text/plain;
        }
    }

{% if events_subdomain | default(true) %}
    # Events Subdomain
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name events.{{ domain }};

        # SSL Configuration (shared certificate)
        ssl_certificate /etc/nginx/ssl/{{ domain }}/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/{{ domain }}/privkey.pem;
        ssl_trusted_certificate /etc/nginx/ssl/{{ domain }}/chain.pem;

        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # Events Application
        location / {
            proxy_pass http://coffeebreak_events;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # Events app specific settings
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;
            proxy_buffering off;

            # Handle static files
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                proxy_pass http://coffeebreak_events;
                proxy_cache_valid 200 1y;
                add_header Cache-Control "public, immutable";
                expires 1y;
            }
        }

        # API access from events subdomain
        location /api/ {
            limit_req zone=api burst={{ api_burst | default('20') }} nodelay;

            proxy_pass http://coffeebreak_api/;
            proxy_set_header Host {{ domain }};  # Use main domain for API
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host {{ domain }};
            proxy_set_header X-Forwarded-Port $server_port;

            # CORS headers for cross-subdomain requests
            add_header Access-Control-Allow-Origin "https://events.{{ domain }}" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;

            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "https://events.{{ domain }}" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type "text/plain charset=UTF-8";
                add_header Content-Length 0;
                return 204;
            }

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;
            proxy_buffering off;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
{% endif %}

{% if enable_monitoring | default(true) %}
    # Monitoring Subdomain (Internal Access Only)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name monitoring.{{ domain }};

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/{{ domain }}/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/{{ domain }}/privkey.pem;
        ssl_trusted_certificate /etc/nginx/ssl/{{ domain }}/chain.pem;

        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # IP-based access control
        {% for ip in allowed_monitoring_ips | default(['127.0.0.1', '10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16']) %}
        allow {{ ip }};
        {% endfor %}
        deny all;

        # Grafana Dashboard
        location / {
            proxy_pass http://grafana_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;
            proxy_buffering off;
        }

        # Prometheus Metrics
        location /prometheus/ {
            proxy_pass http://prometheus_upstream/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            proxy_http_version 1.1;
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;
            proxy_buffering off;
        }
    }
{% endif %}

    # Default catch-all server (security)
    server {
        listen 80 default_server;
        listen 443 ssl default_server;
        listen [::]:80 default_server;
        listen [::]:443 ssl default_server;
        server_name _;

        # Dummy SSL certificate for default server
        ssl_certificate /etc/nginx/ssl/default/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/default/key.pem;

        # Return 444 for unknown hosts
        return 444;
    }
}

# TCP/UDP proxy (if needed for future services)
# stream {
#     upstream backend {
#         server backend1.example.com:12345;
#         server backend2.example.com:12345;
#     }
#
#     server {
#         listen 12345;
#         proxy_pass backend;
#     }
# }